package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;

import com.pathplanner.lib.auto.AutoBuilder;
import com.pathplanner.lib.auto.NamedCommands;
import com.pathplanner.lib.path.PathPlannerPath;

import edu.wpi.first.epilogue.Logged;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Commands;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;

/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
@Logged
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  public final DriveSubsystem m_drive = new DriveSubsystem();
  public final ShooterSubsystem m_shooterSubsystem = new ShooterSubsystem();
  public final AlgaeSubsystem m_algaeSubsystem = new AlgaeSubsystem();

  private final XboxController driveController = new XboxController(0);
  private final XboxController operatorController = new XboxController(1);

  private final JoystickButton operateA = new JoystickButton(operatorController, XboxController.Button.kA.value);
  private final JoystickButton operateY = new JoystickButton(operatorController, XboxController.Button.kY.value);
  private final JoystickButton operateX = new JoystickButton(operatorController, XboxController.Button.kX.value);
  
  private final SendableChooser<Command> autoChooser;

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {

    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // Configure the button bindings
    configureButtonBindings();

    // Configure default command
    m_drive.setDefaultCommand(new DefaultDriveCommand(m_drive, driveController));
    m_shooterSubsystem.setDefaultCommand(new DefaultShooterCommand(m_shooterSubsystem));
    m_algaeSubsystem.setDefaultCommand(new DefaultAlgaeCommand(m_algaeSubsystem));

    NamedCommands.registerCommand("ShootCoral", new ShootCoral(m_shooterSubsystem));

    // Build an auto chooser. This will use Commands.none() as the default option.
    autoChooser = AutoBuilder.buildAutoChooser();

    // Another option that allows you to specify the default auto by its name
    // autoChooser = AutoBuilder.buildAutoChooser("My Default Auto");
  
    SmartDashboard.putData("Auto Chooser", autoChooser);

  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {

    operateA.whileTrue(
      new ShootCoral(m_shooterSubsystem)
    );

    operateY.whileTrue(
      new AlgaeIntake(m_algaeSubsystem)
    );

    operateX.whileTrue(
      new AlgaeExtake(m_algaeSubsystem)
    );

  }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  // public Command getAutonomousCommand() {
  //   // The selected command will be run in autonomous
  //   return Commands.none();
  // }

  // public Command getAutonomousCommand() {
  //   try {
  //     PathPlannerPath path = PathPlannerPath.fromPathFile(null);
  //     return AutoBuilder.followPath(path);
  //   } catch (Exception e) {
  //     DriverStation.reportError("Big oops: " + e.getMessage(), e.getStackTrace());
  //     return Commands.none();
  //   }
  // }
  
    public Command getAutonomousCommand() {
      return autoChooser.getSelected();
    }

}

